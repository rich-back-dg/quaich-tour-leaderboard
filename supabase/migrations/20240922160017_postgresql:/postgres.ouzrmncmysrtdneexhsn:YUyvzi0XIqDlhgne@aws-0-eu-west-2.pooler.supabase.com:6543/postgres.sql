create extension if not exists "tablefunc" with schema "public" version '1.0';

create table "public"."courses" (
    "course_name" text,
    "course_id" bigint generated by default as identity not null,
    "td_id" uuid default auth.uid()
);


alter table "public"."courses" enable row level security;

create table "public"."layouts" (
    "id" bigint generated by default as identity not null,
    "layout_name" text not null,
    "hole_pars" jsonb,
    "total_par" bigint,
    "td_id" uuid not null default auth.uid(),
    "course_id" bigint not null
);


alter table "public"."layouts" enable row level security;

create table "public"."players" (
    "first_name" text,
    "last_name" text not null,
    "pdga_num" text not null default ''::text,
    "id" uuid not null default gen_random_uuid(),
    "division" text,
    "has_no_pdga_num" boolean
);


alter table "public"."players" enable row level security;

create table "public"."profiles" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "role" text default 'player'::text,
    "first_name" text default ''::text,
    "last_name" text default ''::text
);


alter table "public"."profiles" enable row level security;

create table "public"."results" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "tournament_id" uuid,
    "player_id" uuid not null,
    "division" text,
    "total" text,
    "prize" text,
    "division_placing" text,
    "overall_placing" bigint,
    "event_points" bigint,
    "is_counted" boolean not null default true
);


alter table "public"."results" enable row level security;

create table "public"."tour_leaderboard" (
    "player_id" uuid not null,
    "events_played" bigint default '0'::bigint,
    "total_tour_points" bigint
);


alter table "public"."tour_leaderboard" enable row level security;

create table "public"."tournaments" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "tournament_name" text,
    "course_id" bigint not null,
    "isMajor" boolean not null default false,
    "date" jsonb,
    "updated_at" timestamp with time zone,
    "updated_by" uuid default auth.uid(),
    "created_by" uuid default auth.uid()
);


alter table "public"."tournaments" enable row level security;

CREATE UNIQUE INDEX courses_course_id_key ON public.courses USING btree (course_id);

CREATE UNIQUE INDEX courses_pkey ON public.courses USING btree (course_id);

CREATE UNIQUE INDEX layouts_pkey ON public.layouts USING btree (id);

CREATE UNIQUE INDEX "players_PDGANum_key" ON public.players USING btree (pdga_num);

CREATE UNIQUE INDEX players_pkey ON public.players USING btree (id);

CREATE UNIQUE INDEX players_player_id_key ON public.players USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX results_pkey ON public.results USING btree (id);

CREATE UNIQUE INDEX tour_leaderboard_pkey ON public.tour_leaderboard USING btree (player_id);

CREATE UNIQUE INDEX tournaments_pkey ON public.tournaments USING btree (id);

alter table "public"."courses" add constraint "courses_pkey" PRIMARY KEY using index "courses_pkey";

alter table "public"."layouts" add constraint "layouts_pkey" PRIMARY KEY using index "layouts_pkey";

alter table "public"."players" add constraint "players_pkey" PRIMARY KEY using index "players_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."results" add constraint "results_pkey" PRIMARY KEY using index "results_pkey";

alter table "public"."tour_leaderboard" add constraint "tour_leaderboard_pkey" PRIMARY KEY using index "tour_leaderboard_pkey";

alter table "public"."tournaments" add constraint "tournaments_pkey" PRIMARY KEY using index "tournaments_pkey";

alter table "public"."courses" add constraint "courses_course_id_key" UNIQUE using index "courses_course_id_key";

alter table "public"."layouts" add constraint "public_layouts_course_id_fkey" FOREIGN KEY (course_id) REFERENCES courses(course_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."layouts" validate constraint "public_layouts_course_id_fkey";

alter table "public"."players" add constraint "players_PDGANum_key" UNIQUE using index "players_PDGANum_key";

alter table "public"."players" add constraint "players_player_id_key" UNIQUE using index "players_player_id_key";

alter table "public"."results" add constraint "public_results_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."results" validate constraint "public_results_player_id_fkey";

alter table "public"."results" add constraint "results_tournament_id_fkey" FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."results" validate constraint "results_tournament_id_fkey";

alter table "public"."tour_leaderboard" add constraint "tour_leaderboard_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tour_leaderboard" validate constraint "tour_leaderboard_player_id_fkey";

alter table "public"."tournaments" add constraint "public_tournaments_course_id_fkey" FOREIGN KEY (course_id) REFERENCES courses(course_id) ON UPDATE CASCADE not valid;

alter table "public"."tournaments" validate constraint "public_tournaments_course_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.calculate_tour_points_total()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$declare
    events_played_count integer;
begin
    -- Calculate the yearly points and count of tournaments played for each player_id
    insert into public.tour_leaderboard(player_id, total_tour_points, events_played)
    select 
        NEW.player_id,
        sum(case when rank <= 5 then event_points else 0 end) as total_tour_points,
        count(distinct tournament_id) as events_played_count
    from (
        select 
            player_id,
            event_points,
            tournament_id,
            row_number() over (partition by player_id order by event_points desc) as rank
        from 
            results
        where 
            player_id = NEW.player_id
    ) as ranked_results
    where 
        rank <= 5 or events_played_count <= 5
    group by 
        player_id
    on conflict (player_id) do update
    set 
        total_tour_points = EXCLUDED.total_tour_points,
        events_played = (
            select count(distinct tournament_id) 
            from results 
            where player_id = NEW.player_id
        );

    return new;
end;$function$
;

create or replace view "public"."divisions_list" as  SELECT DISTINCT players.division
   FROM players;


CREATE OR REPLACE FUNCTION public.generate_player_event_points_view()
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$declare
    tournament_names text;
    dynamic_sql text;
begin
    -- Get distinct tournament names as comma-separated string
    select string_agg(quote_ident(lower(replace(tournament_name, ' ', '_'))) || '_points int', ', ')
    into tournament_names
    from (select distinct tournament_name from tournaments) as t;

    -- Generate dynamic SQL query for creating the view
    dynamic_sql := '
    create or replace view player_event_points as
    select *
    from crosstab(
        ''select player_id, tournament_name, event_points
         from results
         join tournaments on results.tournament_id = tournaments.id
         order by player_id, tournament_name'',
        ''select distinct tournament_name from tournaments order by tournament_name''
    ) as ct(player_id text, ' || tournament_names || ');
    ';

    -- Execute the dynamic SQL query
    EXECUTE dynamic_sql;
end;$function$
;

CREATE OR REPLACE FUNCTION public.get_first_place_players(tournament_id_to_search uuid)
 RETURNS TABLE(first_name text, last_name text, division text)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT 
        p.first_name, 
        p.last_name,
        r.division
    FROM 
        results r 
    JOIN 
        players p ON r.player_id = p.id 
    WHERE 
        r.tournament_id = tournament_id_to_search 
        AND r.division_placing = '1';
END; 
$function$
;

CREATE OR REPLACE FUNCTION public.new_user_profile()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$declare
    signup_code text;
    fname text;
    lname text;
begin
    signup_code := NEW.raw_user_meta_data->>'signup_code';
    fname := NEW.raw_user_meta_data->>'first_name';
    lname := NEW.raw_user_meta_data->>'last_name';

    IF signup_code = '37653' THEN
    INSERT INTO public.profiles (id, role, first_name, last_name)
    VALUES (
      NEW.id,
      'td',
      fname,
      lname
      );
    ELSE
    INSERT INTO public.profiles (id, role, first_name, last_name)
    VALUES (
      NEW.id,
      'player',
      fname,
      lname
      );
    END IF;
    
    RETURN NEW;
end;$function$
;

create type "public"."tablefunc_crosstab_2" as ("row_name" text, "category_1" text, "category_2" text);

create type "public"."tablefunc_crosstab_3" as ("row_name" text, "category_1" text, "category_2" text, "category_3" text);

create type "public"."tablefunc_crosstab_4" as ("row_name" text, "category_1" text, "category_2" text, "category_3" text, "category_4" text);

create or replace view "public"."tour_leaderboard_view" as  SELECT tl.player_id,
    tl.events_played,
    tl.total_tour_points,
    rank() OVER (ORDER BY tl.total_tour_points DESC) AS rank,
    concat(players.first_name, ' ', players.last_name) AS name,
    json_agg((to_jsonb(r.*) - 'player_id'::text)) AS player_results,
    players.first_name,
    players.last_name,
    players.pdga_num,
    players.id,
    players.division,
    players.has_no_pdga_num
   FROM ((tour_leaderboard tl
     JOIN players ON ((tl.player_id = players.id)))
     LEFT JOIN results r ON ((tl.player_id = r.player_id)))
  GROUP BY tl.player_id, players.id, players.first_name, players.last_name, players.pdga_num
  ORDER BY tl.total_tour_points DESC;


CREATE OR REPLACE FUNCTION public.update_is_counted()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
    update results as r
    set is_counted = false
    where r.player_id = NEW.player_id
    and r.tournament_id not in (
        select tournament_id
        from (
            select tournament_id
            from results
            where player_id = NEW.player_id
            order by event_points desc
            limit 5
        ) as top_5_tournaments
    )
    and (
        select count(distinct tournament_id)
        from results
        where player_id = NEW.player_id
    ) >= 6;

    return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.update_tour_leaderboard_after_delete()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Calculate the yearly points and count of tournaments played for each player_id
    INSERT INTO public.tour_leaderboard (player_id, total_tour_points, events_played)
    SELECT 
        player_id,
        SUM(
            CASE 
                WHEN rank <= 5 THEN event_points 
                ELSE 0 
            END) AS total_tour_points,
        COUNT(DISTINCT tournament_id) AS events_played
    FROM (
        SELECT 
            player_id,
            event_points,
            tournament_id,
            ROW_NUMBER() OVER (
                PARTITION BY player_id 
                ORDER BY event_points DESC
            ) AS rank
        FROM 
            public.results
    ) AS ranked_results
    WHERE 
        rank <= 5
    GROUP BY 
        player_id
    ON CONFLICT (player_id) DO UPDATE 
    SET 
        total_tour_points = EXCLUDED.total_tour_points,
        events_played = (
            SELECT 
                COUNT(DISTINCT tournament_id) 
            FROM 
                public.results 
            WHERE 
                player_id = EXCLUDED.player_id
        );

    RETURN NULL; -- Triggers that do not modify the row can return NULL
END;
$function$
;

grant delete on table "public"."courses" to "anon";

grant insert on table "public"."courses" to "anon";

grant references on table "public"."courses" to "anon";

grant select on table "public"."courses" to "anon";

grant trigger on table "public"."courses" to "anon";

grant truncate on table "public"."courses" to "anon";

grant update on table "public"."courses" to "anon";

grant delete on table "public"."courses" to "authenticated";

grant insert on table "public"."courses" to "authenticated";

grant references on table "public"."courses" to "authenticated";

grant select on table "public"."courses" to "authenticated";

grant trigger on table "public"."courses" to "authenticated";

grant truncate on table "public"."courses" to "authenticated";

grant update on table "public"."courses" to "authenticated";

grant delete on table "public"."courses" to "service_role";

grant insert on table "public"."courses" to "service_role";

grant references on table "public"."courses" to "service_role";

grant select on table "public"."courses" to "service_role";

grant trigger on table "public"."courses" to "service_role";

grant truncate on table "public"."courses" to "service_role";

grant update on table "public"."courses" to "service_role";

grant delete on table "public"."layouts" to "anon";

grant insert on table "public"."layouts" to "anon";

grant references on table "public"."layouts" to "anon";

grant select on table "public"."layouts" to "anon";

grant trigger on table "public"."layouts" to "anon";

grant truncate on table "public"."layouts" to "anon";

grant update on table "public"."layouts" to "anon";

grant delete on table "public"."layouts" to "authenticated";

grant insert on table "public"."layouts" to "authenticated";

grant references on table "public"."layouts" to "authenticated";

grant select on table "public"."layouts" to "authenticated";

grant trigger on table "public"."layouts" to "authenticated";

grant truncate on table "public"."layouts" to "authenticated";

grant update on table "public"."layouts" to "authenticated";

grant delete on table "public"."layouts" to "service_role";

grant insert on table "public"."layouts" to "service_role";

grant references on table "public"."layouts" to "service_role";

grant select on table "public"."layouts" to "service_role";

grant trigger on table "public"."layouts" to "service_role";

grant truncate on table "public"."layouts" to "service_role";

grant update on table "public"."layouts" to "service_role";

grant delete on table "public"."players" to "anon";

grant insert on table "public"."players" to "anon";

grant references on table "public"."players" to "anon";

grant select on table "public"."players" to "anon";

grant trigger on table "public"."players" to "anon";

grant truncate on table "public"."players" to "anon";

grant update on table "public"."players" to "anon";

grant delete on table "public"."players" to "authenticated";

grant insert on table "public"."players" to "authenticated";

grant references on table "public"."players" to "authenticated";

grant select on table "public"."players" to "authenticated";

grant trigger on table "public"."players" to "authenticated";

grant truncate on table "public"."players" to "authenticated";

grant update on table "public"."players" to "authenticated";

grant delete on table "public"."players" to "service_role";

grant insert on table "public"."players" to "service_role";

grant references on table "public"."players" to "service_role";

grant select on table "public"."players" to "service_role";

grant trigger on table "public"."players" to "service_role";

grant truncate on table "public"."players" to "service_role";

grant update on table "public"."players" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."results" to "anon";

grant insert on table "public"."results" to "anon";

grant references on table "public"."results" to "anon";

grant select on table "public"."results" to "anon";

grant trigger on table "public"."results" to "anon";

grant truncate on table "public"."results" to "anon";

grant update on table "public"."results" to "anon";

grant delete on table "public"."results" to "authenticated";

grant insert on table "public"."results" to "authenticated";

grant references on table "public"."results" to "authenticated";

grant select on table "public"."results" to "authenticated";

grant trigger on table "public"."results" to "authenticated";

grant truncate on table "public"."results" to "authenticated";

grant update on table "public"."results" to "authenticated";

grant delete on table "public"."results" to "service_role";

grant insert on table "public"."results" to "service_role";

grant references on table "public"."results" to "service_role";

grant select on table "public"."results" to "service_role";

grant trigger on table "public"."results" to "service_role";

grant truncate on table "public"."results" to "service_role";

grant update on table "public"."results" to "service_role";

grant delete on table "public"."tour_leaderboard" to "anon";

grant insert on table "public"."tour_leaderboard" to "anon";

grant references on table "public"."tour_leaderboard" to "anon";

grant select on table "public"."tour_leaderboard" to "anon";

grant trigger on table "public"."tour_leaderboard" to "anon";

grant truncate on table "public"."tour_leaderboard" to "anon";

grant update on table "public"."tour_leaderboard" to "anon";

grant delete on table "public"."tour_leaderboard" to "authenticated";

grant insert on table "public"."tour_leaderboard" to "authenticated";

grant references on table "public"."tour_leaderboard" to "authenticated";

grant select on table "public"."tour_leaderboard" to "authenticated";

grant trigger on table "public"."tour_leaderboard" to "authenticated";

grant truncate on table "public"."tour_leaderboard" to "authenticated";

grant update on table "public"."tour_leaderboard" to "authenticated";

grant delete on table "public"."tour_leaderboard" to "service_role";

grant insert on table "public"."tour_leaderboard" to "service_role";

grant references on table "public"."tour_leaderboard" to "service_role";

grant select on table "public"."tour_leaderboard" to "service_role";

grant trigger on table "public"."tour_leaderboard" to "service_role";

grant truncate on table "public"."tour_leaderboard" to "service_role";

grant update on table "public"."tour_leaderboard" to "service_role";

grant delete on table "public"."tournaments" to "anon";

grant insert on table "public"."tournaments" to "anon";

grant references on table "public"."tournaments" to "anon";

grant select on table "public"."tournaments" to "anon";

grant trigger on table "public"."tournaments" to "anon";

grant truncate on table "public"."tournaments" to "anon";

grant update on table "public"."tournaments" to "anon";

grant delete on table "public"."tournaments" to "authenticated";

grant insert on table "public"."tournaments" to "authenticated";

grant references on table "public"."tournaments" to "authenticated";

grant select on table "public"."tournaments" to "authenticated";

grant trigger on table "public"."tournaments" to "authenticated";

grant truncate on table "public"."tournaments" to "authenticated";

grant update on table "public"."tournaments" to "authenticated";

grant delete on table "public"."tournaments" to "service_role";

grant insert on table "public"."tournaments" to "service_role";

grant references on table "public"."tournaments" to "service_role";

grant select on table "public"."tournaments" to "service_role";

grant trigger on table "public"."tournaments" to "service_role";

grant truncate on table "public"."tournaments" to "service_role";

grant update on table "public"."tournaments" to "service_role";

create policy "Enable all for authenticated users only"
on "public"."courses"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."courses"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."layouts"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."layouts"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."players"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."players"
as permissive
for select
to public
using (true);


create policy "Enable users to view their own data only"
on "public"."profiles"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable all for authenticated users only"
on "public"."results"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."results"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."tour_leaderboard"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."tour_leaderboard"
as permissive
for select
to public
using (true);


create policy "Enable all for authenticated users only"
on "public"."tournaments"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."tournaments"
as permissive
for select
to public
using (true);


CREATE TRIGGER after_results_delete AFTER DELETE ON public.results FOR EACH ROW EXECUTE FUNCTION update_tour_leaderboard_after_delete();

CREATE TRIGGER calculate_tour_points_total_trigger AFTER INSERT OR UPDATE ON public.results FOR EACH ROW EXECUTE FUNCTION calculate_tour_points_total();

CREATE TRIGGER update_is_counted_trigger AFTER INSERT ON public.results FOR EACH ROW EXECUTE FUNCTION update_is_counted();


